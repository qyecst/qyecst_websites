# http://uwsgi-docs.readthedocs.io/en/latest/Options.html
[uwsgi]
# 使用默认协议绑定到指定的UNIX/TCP套接字
socket = 0.0.0.0:80
# 指定默认的套接字协议
#protocol = uwsgi
# 产生工作进程数量
processes = 2
# 串行化accept，避免一个请求唤醒所有进程，但只有一个进程连接成功
thunder-lock = true
# harakiri超时，秒，一个请求花费时间超过此值，请求会被丢弃，资源回收
#harakiri = 10
# 在app加载后，进程后台运行，打印日志。daemonize: 直接后台运行
#daemonize2 = site.v4.uwsgi.log
# 设置套接字监听队列大小
#listen = 100
# 设置socket文件的权限
#chmod-socket = 666
# 允许你在app程序中产生一个子线程
enable-threads = true
# 给进程设置一些有意义的名字，如'uWSGI master', 'uWSGI worker 1'
#auto-procname = true
# 进程名前缀，空格分隔，如'your-prefix process-name'
#procname-prefix-spaced = sitev4
# 启用主进程
master = true
# 工作进程请求数的上限，每个进程到次数会自动重启/默默地对抗内存泄漏
#max-requests = 10000
# 不记录请求日志，只记录错误/内部消息
disable-logging = true
# pid文件路径
pidfile = /tmp/uwsgi.pid
# 改变默认目录到指定目录
chdir = /site/
# 改变默认根目录到指定目录
#chroot = /site/
# user id/name
#uid = <run_user_name>
# gropu id/name
#gid = <run_user_group_name>
# 当文件改变时，重启uwsgi，如`touch reload.txt`，则uwsgi会重启
touch-reload = /site/reload.mark
# 启动时只分配n个进程/至少1，如果当前进程不足以处理收到的请求，按请求量按需启动其他进程，直到进程达到预先设置的个数
#cheaper = 1
# 进程空闲超时后减少进程数，秒
#cheaper-idle = 15
# 线程模式，进程内几个线程
threads = 1
# 入口文件
wsgi-file = app.py
# 启动入口
callable = app
# 虚拟环境
virtualenv = /site/venv/
# 退出时清理文件
vacuum = true
